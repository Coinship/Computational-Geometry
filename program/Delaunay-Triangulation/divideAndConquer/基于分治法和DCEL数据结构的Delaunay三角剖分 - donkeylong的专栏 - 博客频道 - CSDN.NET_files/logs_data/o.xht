<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html [
  <!ENTITY % htmlDTD
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "DTD/xhtml1-strict.dtd">
  %htmlDTD;
  <!ENTITY % netErrorDTD
    SYSTEM "chrome://global/locale/netError.dtd">
  %netErrorDTD;

<!ENTITY loadError.label "頁面載入發生問題">
<!ENTITY retry.label "重試">

<!-- Specific error messages -->

<!ENTITY connectionFailure.title "連線失敗">
<!ENTITY connectionFailure.longDesc "&sharedLongDesc;">

<!ENTITY deniedPortAccess.title "此網址已被限制">
<!ENTITY deniedPortAccess.longDesc "">

<!ENTITY dnsNotFound.title "找不到伺服器">
<!ENTITY dnsNotFound.longDesc "<ul>
   <li>請檢查網址是否有打錯？例如把
   <strong>www</strong>.example.com 打成
   <strong>ww</strong>.example.com</li>
   <li>若無法載入任何網站，請檢查您的網路連線狀態。</li>
   <li>若電腦或網路被防火牆或 Proxy 保護，請確定
   &brandShortName; 被允許存取網路。</li> </ul>
                    ">

<!ENTITY fileNotFound.title "找不到檔案">
<!ENTITY fileNotFound.longDesc "
<ul>
  <li>請檢查檔名是否有大小寫錯誤、拼錯字。</li>
  <li>請檢查檔案是否已被移動、改名或刪除。</li>
</ul>
">


<!ENTITY generic.title "噢！">
<!ENTITY generic.longDesc "
<p>&brandShortName; 因為某些原因無法載入此網頁。</p>
">

<!ENTITY malformedURI.title "不正確的網址">
<!ENTITY malformedURI.longDesc "<ul>
   <li>網址通常長的像
      <strong>http://www.example.com/</strong>。</li>
   <li>請確定您用的是斜線 (例:
      <strong>/</strong>)。</li>
</ul>
                ">

<!ENTITY netInterrupt.title "資料傳輸中斷">
<!ENTITY netInterrupt.longDesc "&sharedLongDesc;">

<!ENTITY notCached.title "文件已過期">
<!ENTITY notCached.longDesc "<p>您所請求的文件已不存在於 &brandShortName; 的快取當中。</p><ul><li>為了您的安全，&brandShortName; 將不會自動重新請求敏感文件。</li><li>請點下重試以重新向網站請求取得文件。</li></ul>">

<!ENTITY netOffline.title "離線模式">
<!ENTITY netOffline.longDesc2 "
<ul>
  <li>請按下「重試」以切換到連線模式並重新載入頁面。</li>
</ul>
">

<!ENTITY contentEncodingError.title "內容編碼錯誤">
<!ENTITY contentEncodingError.longDesc "
<ul>
  <li>請向網站擁有者回報此問題。</li>
</ul>
">

<!ENTITY unsafeContentType.title "不安全的檔案格式">
<!ENTITY unsafeContentType.longDesc "
<ul>
  <li>請向網站擁有者回報此問題。</li>
</ul>
">

<!ENTITY netReset.title "連線被重設">
<!ENTITY netReset.longDesc "&sharedLongDesc;">

<!ENTITY netTimeout.title "連線已逾時">
<!ENTITY netTimeout.longDesc "&sharedLongDesc;">

<!ENTITY unknownProtocolFound.title "無法理解的網址">
<!ENTITY unknownProtocolFound.longDesc "<ul><li>您可能需要安裝其他軟體才能開啟此網址。</li></ul>">

<!ENTITY proxyConnectFailure.title "Proxy 伺服器拒絕連線">
<!ENTITY proxyConnectFailure.longDesc "
<ul>
  <li>請檢查 Proxy 設定是否正確。</li>
  <li>與您的網路管理員聯絡，確定 Proxy 伺服器正常運作。</li>
</ul>
">

<!ENTITY proxyResolveFailure.title "找不到 Proxy 伺服器">
<!ENTITY proxyResolveFailure.longDesc "
<ul>
  <li>請檢查 Proxy 設定是否正確。</li>
  <li>請檢查您的網路連線狀態。</li>
  <li>若電腦或網路被防火牆或 Proxy 保護，請確定
    &brandShortName; 被允許存取網路。</li>
</ul>
">

<!ENTITY redirectLoop.title "頁面重新導向不正確">
<!ENTITY redirectLoop.longDesc "
<ul>
  <li>有時候停用或拒絕接受 Cookie 會造成此問題。</li>
</ul>
">

<!ENTITY unknownSocketType.title "伺服器回應錯誤">
<!ENTITY unknownSocketType.longDesc "
<ul>
  <li>請確定電腦已安裝個人安全管理員 (Personal Security Manager)。</li>
  <li>可能是伺服器上的非標準設定所造成的。</li>
</ul>
">

<!ENTITY nssFailure2.title "安全連線失敗">
<!ENTITY nssFailure2.longDesc2 "<ul>
  <li>因為無法驗證已接收資料的真實性，無法顯示您嘗試檢視的頁面。</li>
  <li>請向網站擁有者回報此問題。</li>
</ul>">

<!ENTITY nssBadCert.title "安全連線失敗">
<!ENTITY nssBadCert.longDesc2 "
<ul>
  <li>這可能是伺服器上的組態設定造成的，或是有人嘗試假造該伺服器。</li>
  <li>若您以前可以與該伺服器正常連線，那麼這個錯誤可能只是暫時的，您可以稍候再試試看。</li>
</ul>
">

<!ENTITY sharedLongDesc "
<ul>
  <li>該網站可能暫時無法使用或太過忙碌，請過幾分鐘後再試試。</li>
  <li>若無法載入任何網站，請檢查您的網路連線狀態。</li>
  <li>若電腦或網路被防火牆或 Proxy 保護，請確定
    &brandShortName; 被允許存取網路。</li>
</ul>
">

<!ENTITY malwareBlocked.title "可能是有害網站！">
<!ENTITY malwareBlocked.longDesc "<p>有害網站會嘗試安裝能竊取隱私資訊、利用您的電腦攻擊他人或破壞作業系統等的惡意軟體到您的電腦上。</p> <p>如果您是網頁擁有者，發現您的網站被誤認為有害網站時可以 <a href='http://www.stopbadware.org/home/reviewinfo' >請求重新審核</a>。</p>">

<!ENTITY phishingBlocked.title "可能是偽造網站！">
<!ENTITY phishingBlocked.longDesc "
<p>在此網頁上輸入的任何個人資訊可能會導致身分被盜用或遭受其他詐騙行為。</p>
<p>這些類型的偽造網頁含有常見的詐騙攻擊特徵，可能是罪犯所製作用來模仿您信任的合法來源之詐騙網頁。</p>
">

<!ENTITY cspFrameAncestorBlocked.title "已依內容安全政策封鎖">
<!ENTITY cspFrameAncestorBlocked.longDesc "<p>&brandShortName; 阻止了這個頁面載入，因為這個頁面的內容安全政策不允許其以這種方式被載入。</p>">

<!ENTITY corruptedContentError.title "內容毀損錯誤">
<!ENTITY corruptedContentError.longDesc "<p>因為在資料傳輸過程當中偵測到錯誤，無法顯示您正要檢視的頁面。</p><ul><li>請通知網站管理者以讓他們知道這個問題。</li></ul>">


<!ENTITY securityOverride.linkText "或者您也可以新增例外網站…">
<!ENTITY securityOverride.getMeOutOfHereButton "帶我離開這裡！">
<!ENTITY securityOverride.exceptionButtonLabel "新增例外網站…">

<!-- LOCALIZATION NOTE (securityOverride.warningContent) - Do not translate the
contents of the <button> tags. It uses strings already defined above. The
button is included here (instead of netError.xhtml) because it exposes
functionality specific to firefox. -->

<!ENTITY securityOverride.warningContent "<p>您不應該在您不完全信任的網路連線，或是不曾看到關於此伺服器的警告的情況下增加例外。</p>

<button id='getMeOutOfHereButton'>&securityOverride.getMeOutOfHereButton;</button>
<button id='exceptionDialogButton'>&securityOverride.exceptionButtonLabel;</button>
">

<!ENTITY remoteXUL.title "遠端 XUL">
<!ENTITY remoteXUL.longDesc "<p><ul><li>請聯絡網站管理員以通知他們這個問題。</li></ul></p>">


  <!ENTITY % globalDTD
    SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
]>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>頁面載入發生問題</title>
    <link rel="stylesheet" href="o_data/netError.css" type="text/css" media="all" />
    <link rel="stylesheet" href="o_data/aboutNetError.css" type="text/css" media="all" />
    <!-- If the location of the favicon is changed here, the FAVICON_ERRORPAGE_URL symbol in
         toolkit/components/places/src/nsFaviconService.h should be updated. -->
    <link rel="icon" type="image/png" id="favicon" href="chrome://global/skin/icons/warning-16.png" />

    <script type="application/javascript"><![CDATA[
      // Error url MUST be formatted like this:
      //   moz-neterror:page?e=error&u=url&d=desc
      //
      // or optionally, to specify an alternate CSS class to allow for
      // custom styling and favicon:
      //
      //   moz-neterror:page?e=error&u=url&s=classname&d=desc

      // Note that this file uses document.documentURI to get
      // the URL (with the format from above). This is because
      // document.location.href gets the current URI off the docshell,
      // which is the URL displayed in the location bar, i.e.
      // the URI that the user attempted to load.

      function getErrorCode()
      {
        var url = document.documentURI;
        var error = url.search(/e\=/);
        var duffUrl = url.search(/\&u\=/);
        return decodeURIComponent(url.slice(error + 2, duffUrl));
      }

      function getCSSClass()
      {
        var url = document.documentURI;
        var matches = url.match(/s\=([^&]+)\&/);
        // s is optional, if no match just return nothing
        if (!matches || matches.length < 2)
          return "";

        // parenthetical match is the second entry
        return decodeURIComponent(matches[1]);
      }

      function getDescription()
      {
        var url = document.documentURI;
        var desc = url.search(/d\=/);

        // desc == -1 if not found; if so, return an empty string
        // instead of what would turn out to be portions of the URI
        if (desc == -1)
          return "";

        return decodeURIComponent(url.slice(desc + 2));
      }

      function retryThis(buttonEl)
      {
        // Note: The application may wish to handle switching off "offline mode"
        // before this event handler runs, but using a capturing event handler.

        // Session history has the URL of the page that failed
        // to load, not the one of the error page. So, just call
        // reload(), which will also repost POST data correctly.
        try {
          location.reload();
        } catch (e) {
          // We probably tried to reload a URI that caused an exception to
          // occur;  e.g. a nonexistent file.
        }

        buttonEl.disabled = true;
      }

      function initPage()
      {
        var err = getErrorCode();

        // if it's an unknown error or there's no title or description
        // defined, get the generic message
        var errTitle = document.getElementById("et_" + err);
        var errDesc  = document.getElementById("ed_" + err);
        if (!errTitle || !errDesc)
        {
          errTitle = document.getElementById("et_generic");
          errDesc  = document.getElementById("ed_generic");
        }

        var title = document.getElementById("errorTitleText");
        if (title)
        {
          title.parentNode.replaceChild(errTitle, title);
          // change id to the replaced child's id so styling works
          errTitle.id = "errorTitleText";
        }

        var sd = document.getElementById("errorShortDescText");
        if (sd)
          sd.textContent = getDescription();

        var ld = document.getElementById("errorLongDesc");
        if (ld)
        {
          ld.parentNode.replaceChild(errDesc, ld);
          // change id to the replaced child's id so styling works
          errDesc.id = "errorLongDesc";
        }

        // remove undisplayed errors to avoid bug 39098
        var errContainer = document.getElementById("errorContainer");
        errContainer.parentNode.removeChild(errContainer);

        var className = getCSSClass();
        if (className && className != "expertBadCert") {
          // Associate a CSS class with the root of the page, if one was passed in,
          // to allow custom styling.
          // Not "expertBadCert" though, don't want to deal with the favicon
          document.documentElement.className = className;

          // Also, if they specified a CSS class, they must supply their own
          // favicon.  In order to trigger the browser to repaint though, we
          // need to remove/add the link element.
          var favicon = document.getElementById("favicon");
          var faviconParent = favicon.parentNode;
          faviconParent.removeChild(favicon);
          favicon.setAttribute("href", "chrome://global/skin/icons/" + className + "_favicon.png");
          faviconParent.appendChild(favicon);
        }
        if (className == "expertBadCert") {
          showSecuritySection();
        }

        if (err == "remoteXUL") {
          // Remove the "Try again" button for remote XUL errors given that
          // it is useless.
          document.getElementById("errorTryAgain").style.display = "none";
        }

        if (err == "cspFrameAncestorBlocked") {
          // Remove the "Try again" button for CSP frame ancestors violation, since it's
          // almost certainly useless. (Bug 553180)
          document.getElementById("errorTryAgain").style.display = "none";
        }

        if (err == "nssBadCert") {
          // Remove the "Try again" button for security exceptions, since it's
          // almost certainly useless.
          document.getElementById("errorTryAgain").style.display = "none";
          document.getElementById("errorPageContainer").setAttribute("class", "certerror");
          addDomainErrorLink();
        }
        else {
          // Remove the override block for non-certificate errors.  CSS-hiding
          // isn't good enough here, because of bug 39098
          var secOverride = document.getElementById("securityOverrideDiv");
          secOverride.parentNode.removeChild(secOverride);
        }
      }

      function showSecuritySection() {
        // Swap link out, content in
        document.getElementById('securityOverrideContent').style.display = '';
        document.getElementById('securityOverrideLink').style.display = 'none';
      }

      /* In the case of SSL error pages about domain mismatch, see if
         we can hyperlink the user to the correct site.  We don't want
         to do this generically since it allows MitM attacks to redirect
         users to a site under attacker control, but in certain cases
         it is safe (and helpful!) to do so.  Bug 402210
      */
      function addDomainErrorLink() {
        // Rather than textContent, we need to treat description as HTML
        var sd = document.getElementById("errorShortDescText");
        if (sd) {
          var desc = getDescription();

          // sanitize description text - see bug 441169

          // First, find the index of the <a> tag we care about, being careful not to
          // use an over-greedy regex
          var re = /<a id="cert_domain_link" title="([^"]+)">/;
          var result = re.exec(desc);
          if(!result)
            return;

          // Remove sd's existing children
          sd.textContent = "";

          // Everything up to the link should be text content
          sd.appendChild(document.createTextNode(desc.slice(0, result.index)));

          // Now create the link itself
          var anchorEl = document.createElement("a");
          anchorEl.setAttribute("id", "cert_domain_link");
          anchorEl.setAttribute("title", result[1]);
          anchorEl.appendChild(document.createTextNode(result[1]));
          sd.appendChild(anchorEl);

          // Finally, append text for anything after the closing </a>
          sd.appendChild(document.createTextNode(desc.slice(desc.indexOf("</a>") + "</a>".length)));
        }

        var link = document.getElementById('cert_domain_link');
        if (!link)
          return;

        var okHost = link.getAttribute("title");
        var thisHost = document.location.hostname;
        var proto = document.location.protocol;

        // If okHost is a wildcard domain ("*.example.com") let's
        // use "www" instead.  "*.example.com" isn't going to
        // get anyone anywhere useful. bug 432491
        okHost = okHost.replace(/^\*\./, "www.");

        /* case #1:
         * example.com uses an invalid security certificate.
         *
         * The certificate is only valid for www.example.com
         *
         * Make sure to include the "." ahead of thisHost so that
         * a MitM attack on paypal.com doesn't hyperlink to "notpaypal.com"
         *
         * We'd normally just use a RegExp here except that we lack a
         * library function to escape them properly (bug 248062), and
         * domain names are famous for having '.' characters in them,
         * which would allow spurious and possibly hostile matches.
         */
        if (endsWith(okHost, "." + thisHost))
          link.href = proto + okHost;

        /* case #2:
         * browser.garage.maemo.org uses an invalid security certificate.
         *
         * The certificate is only valid for garage.maemo.org
         */
        if (endsWith(thisHost, "." + okHost))
          link.href = proto + okHost;
      }

      function endsWith(haystack, needle) {
        return haystack.slice(-needle.length) == needle;
      }

    ]]></script>
  </head>

  <body dir="ltr">

    <!-- ERROR ITEM CONTAINER (removed during loading to avoid bug 39098) -->
    

    <!-- PAGE CONTAINER (for styling purposes only) -->
    <div id="errorPageContainer">

      <!-- Error Title -->
      <div id="errorTitle">
        <h1 id="errorTitleText">找不到伺服器</h1>
      </div>

      <!-- LONG CONTENT (the section most likely to require scrolling) -->
      <div id="errorLongContent">

        <!-- Short Description -->
        <div id="errorShortDesc">
          <p id="errorShortDescText">Firefox 找不到伺服器 pos.baidu.com。</p>
        </div>

        <!-- Long Description (Note: See netError.dtd for used XHTML tags) -->
        <div id="errorLongDesc"><ul>
   <li>請檢查網址是否有打錯？例如把
   <strong>www</strong>.example.com 打成
   <strong>ww</strong>.example.com</li>
   <li>若無法載入任何網站，請檢查您的網路連線狀態。</li>
   <li>若電腦或網路被防火牆或 Proxy 保護，請確定
   Firefox 被允許存取網路。</li> </ul>
                    </div>

        <!-- Override section - For ssl errors only.  Removed on init for other
             error types.  -->
        
      </div>

      <!-- Retry Button -->
      <button id="errorTryAgain" autocomplete="off" onclick="retryThis(this);">重試</button>
      <script>
        // Only do autofocus if we're the toplevel frame; otherwise we
        // don't want to call attention to ourselves!  The key part is
        // that autofocus happens on insertion into the tree, so we
        // can remove the button, add @autofocus, and reinsert the
        // button.
        if (window.top == window) {
            var button = document.getElementById("errorTryAgain");
            var nextSibling = button.nextSibling;
            var parent = button.parentNode;
            parent.removeChild(button);
            button.setAttribute("autofocus", "true");
            parent.insertBefore(button, nextSibling);
        }
      </script>

    </div>

    <!--
    - Note: It is important to run the script this way, instead of using
    - an onload handler. This is because error pages are loaded as
    - LOAD_BACKGROUND, which means that onload handlers will not be executed.
    -->
    <script type="application/javascript">initPage();</script>

  </body>
</html>